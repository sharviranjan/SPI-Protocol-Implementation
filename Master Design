//Master Design Code
module Master(MISO, SS_IN, START, READ_MEMORY, DATA,
	      MOSI, SS1_OUT, SS2_OUT, SS3_OUT, CLK_OUT, OUT_SHIFT_STATE, OUT_MAIN, isValid_Selection);

// INPUTS
input MISO;
input [0:2]SS_IN;
input START;
input READ_MEMORY;
input [7:0] DATA;

// OUTPUTS
output MOSI;
output reg SS1_OUT = 1;
output reg SS2_OUT = 1;
output reg SS3_OUT = 1;
output reg isValid_Selection; // A flag to detect any invalid value for the SS line
output CLK_OUT;
output [0:7] OUT_SHIFT_STATE;
output [0:7] OUT_MAIN;

// PARAMETERS
reg [0:7] MAIN_MEMORY = 8'b00000000;
reg [0:7] STATE;
integer SAMPLED_COUNT;
reg CLK;
reg DATA_IN;
reg START_CLK;

// Clock Output to the Slave
assign CLK_OUT = CLK;
// 
assign OUT_SHIFT_STATE = STATE;
assign OUT_MAIN = MAIN_MEMORY;
// Master Output to the Slave
assign MOSI = STATE[7];

// Load Data to The Main Memory
always @(posedge READ_MEMORY) begin 
    MAIN_MEMORY = DATA;
end

// START COM.
always @(posedge START) begin
    // Initializing Parameters
    CLK = 0; // Fixed CPOL = 0
    STATE = MAIN_MEMORY;
    SAMPLED_COUNT = 0;
    isValid_Selection = 1;
    #10 START_CLK = 1;

    // Choose the Correct Slave
    if (SS_IN == 3'b011)
        {SS1_OUT, SS2_OUT, SS3_OUT} = 3'b011;
    else if (SS_IN == 3'b101)
        {SS1_OUT, SS2_OUT, SS3_OUT} = 3'b101;
    else if (SS_IN == 3'b110)
        {SS1_OUT, SS2_OUT, SS3_OUT} = 3'b110;
    else
        isValid_Selection = 0;
end

// Clock Generation
always @(negedge SS1_OUT, negedge SS2_OUT, negedge SS3_OUT) begin 
    while ((SS1_OUT && SS2_OUT && SS3_OUT) == 0) begin
        if (START_CLK == 1) // To Avoid Change The Clock Value at the End of COM.
            CLK = ~CLK;
        #10; 
    end
end

// Positive Edge: Shifting data
always @(posedge CLK) begin
    if (START_CLK == 1) begin
        DATA_IN = MISO;
        STATE = {DATA_IN, STATE[0:6]}; 
        SAMPLED_COUNT = SAMPLED_COUNT + 1;

        // End COM if all 8 bits are shifted
        if (SAMPLED_COUNT == 8) begin
            #10
            {SS1_OUT, SS2_OUT, SS3_OUT} = 3'b111;
            START_CLK = 0;
        end
    end
end

endmodule

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
module Slave(SS, CLK, MOSI, READ_MEMORY, DATA, 
	     MISO, OUT_SHIFT_STATE, OUT_MAIN);

// INPUTS
input CLK;    // Fixed CPOL = 0
input SS;     // SLAVE SELECT
input MOSI;   // MASTER OUTPUT SLAVE INPUT
input READ_MEMORY; // Reading from memory or writing
input [7:0] DATA; // Input data for slave

// OUTPUTS
output MISO;  // MASTER INPUT SLAVE OUTPUT
output [0:7] OUT_SHIFT_STATE; 
output [0:7] OUT_MAIN;

// PARAMETERS
reg [0:7] MAIN_MEMORY = 8'b00000000;
reg [0:7] STATE;
reg DATA_IN;

assign OUT_SHIFT_STATE = STATE;
assign OUT_MAIN = MAIN_MEMORY;
assign MISO = STATE[7];

// Load Data to The Main Memory
always @(posedge READ_MEMORY) begin 
    MAIN_MEMORY = DATA;
end

always @(negedge SS) begin
    STATE = MAIN_MEMORY;
end

// Shifting Data on each Clock Edge
always @(posedge CLK) begin
    if (SS == 0) begin
        DATA_IN = MOSI;
        STATE = {DATA_IN, STATE[0:6]}; 
    end
end

endmodule

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
module Integration(SS_IN, START, READ_MEMORY_M, DATA_M, READ_MEMORY_S, DATA_S, OUT_STATE_MASTER, OUT_MAIN_MASTER, OUT_STATE_S1, OUT_STATE_S2, OUT_STATE_S3, OUT_MAIN_SLAVE, CLK, isValid_Selection);

// INPUTS
input [0:2] SS_IN;
input START;
input READ_MEMORY_M;
input [0:7] DATA_M;
input READ_MEMORY_S;
input [0:7] DATA_S;

// OUTPUTS
output [0:7] OUT_STATE_MASTER;
output [0:7] OUT_MAIN_MASTER;
output [0:7] OUT_MAIN_SLAVE;
output wire CLK;
output wire isValid_Selection;
output wire [0:7] OUT_STATE_S1;
output wire [0:7] OUT_STATE_S2;
output wire [0:7] OUT_STATE_S3;

// PARAMETERS
wire MISO;
wire MISO_S[1:3];
wire MOSI;
wire SS1;
wire SS2;
wire SS3;
wire [0:7] OUT_MAIN_S[1:3];

Master M(MISO, SS_IN, START, READ_MEMORY_M, DATA_M, MOSI, SS1, SS2, SS3, CLK, OUT_STATE_MASTER, OUT_MAIN_MASTER, isValid_Selection);
Slave S1(SS1, CLK, MOSI, READ_MEMORY_S, DATA_S, MISO_S[1], OUT_STATE_S1, OUT_MAIN_S[1]);
Slave S2(SS2, CLK, MOSI, READ_MEMORY_S, DATA_S, MISO_S[2], OUT_STATE_S2, OUT_MAIN_S[2]);
Slave S3(SS3, CLK, MOSI, READ_MEMORY_S, DATA_S, MISO_S[3], OUT_STATE_S3, OUT_MAIN_S[3]);

assign MISO = (SS1 == 0) ? MISO_S[1] :
              (SS2 == 0) ? MISO_S[2] :
              (SS3 == 0) ? MISO_S[3] : 1'bx;

assign OUT_MAIN_SLAVE = (SS1 == 0) ? OUT_MAIN_S[1] :
                        (SS2 == 0) ? OUT_MAIN_S[2] :
                        (SS3 == 0) ? OUT_MAIN_S[3] : OUT_MAIN_SLAVE;

endmodule
